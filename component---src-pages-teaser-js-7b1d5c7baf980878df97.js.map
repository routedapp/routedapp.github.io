{"version":3,"file":"component---src-pages-teaser-js-7b1d5c7baf980878df97.js","mappings":"kNAKMA,EAAK,aAaI,SAASC,EAAQC,GAI/B,IAHAC,EAAID,EAAJC,KACAC,EAAEF,EAAFE,GAAEC,EAAAH,EACFI,UAAAA,OAAS,IAAAD,EAAGE,EAAAA,GAAGF,EAKRG,GAHsCC,EAAAA,EAAAA,IAAeT,GAApDU,sBAAyBC,MAGZC,QAAO,SAAAC,GAAO,OAAUA,EAAdV,OAAkCA,CAAI,IAA1D,GAEX,OAAKK,GAQJM,EAAAA,EAAAA,KAACC,EAAAA,GAAU,CAAAC,UACVF,EAAAA,EAAAA,KAACR,EAAS,CACTF,GAAEa,OAAAC,OAAA,CACD,qBAAsB,CACrBC,EAAG,IAEDf,GACFY,UAEDI,EAAAA,EAAAA,GAAeZ,EAAKa,UAhBhB,IAoBT,C,iJCjDA,EAAe,IAA0B,uD,UCM5BC,GAAOC,EAAAA,EAAAA,GAAK,eAEnBC,EAAY,QAKZC,EAAS,CACd,IAAK,CACJC,MAAOF,EACPG,UAAW,SACXC,SAAU,SAEXC,GAAI,CACHD,SAAU,MACVE,WAAY,IACZC,WAAY,IACZC,GAAI,OACJC,OAAQ,OACRC,QAAS,SAEVC,GAAI,CACHP,SAAU,SACVE,WAAY,KAEbM,EAAG,CACFV,MAAOF,EACPI,SAAU,MACVE,WAAY,IACZO,eAAgB,QAEjB,UAAW,CACVA,eAAgB,aAEjBC,OAAQ,CACPC,OAAQ,MACRC,UAAW,kBACXC,gBAAgB,OAAQC,EAAI,IAC5BC,mBAAoB,aACpBC,eAAgB,OAChBC,iBAAkB,aAEnBC,KAAM,CACLC,GAAI,OACJC,SAAU,QACVC,SAAU,SACVC,MAAO,QAIT,SAASC,EACRC,GAIA,OACCtC,EAAAA,EAAAA,KAACC,EAAAA,GAAU,CAAAC,UACVF,EAAAA,EAAAA,KAACP,EAAAA,GAAGU,OAAAC,OAAA,GACCkC,EAAK,CACThD,GAAIqB,MAIR,CAEe,SAAS4B,IAEvB,OACCC,EAAAA,EAAAA,MAACH,EAAM,CAAAnC,SAAA,EACNF,EAAAA,EAAAA,KAAA,cACAA,EAAAA,EAAAA,KAACb,EAAAA,EAAQ,CAACE,KAAK,SAASG,UAAU,WAGrC,C,8FCvEA,SAASiD,IAcP,OAbAA,EAAWtC,OAAOC,OAASD,OAAOC,OAAOsC,OAAS,SAAUC,GAC1D,IAAK,IAAIC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CACzC,IAAIG,EAASF,UAAUD,GAEvB,IAAK,IAAII,KAAOD,EACV5C,OAAO8C,UAAUC,eAAeC,KAAKJ,EAAQC,KAC/CL,EAAOK,GAAOD,EAAOC,GAG3B,CAEA,OAAOL,CACT,EACOF,EAASW,MAAMC,KAAMR,UAC9B,CAEA,IAAI5C,EAAa,SAAoBqC,GACnC,OAAOgB,EAAI,MAAOb,EAAS,CAAC,EAAGH,EAAO,CACpChD,GAAImD,EAAS,CACXc,WAAY,OACZtC,WAAY,OACZD,WAAY,OACZwC,QAAS,UACRlB,EAAMhD,MAEb,EACIgE,EAAM,I","sources":["webpack://routed-website/./src/components/BodyText.js","webpack://routed-website/./src/images/logomark.png","webpack://routed-website/./src/pages/teaser.js","webpack://routed-website/./node_modules/theme-ui/dist/theme-ui.esm.js"],"sourcesContent":["import React from \"react\";\nimport { graphql, useStaticQuery } from \"gatsby\";\nimport { renderRichText } from \"gatsby-source-contentful/rich-text\";\nimport { BaseStyles, Box } from \"theme-ui\";\n\nconst query = graphql`\n\t{\n\t\tallContentfulBodyText {\n\t\t\tnodes {\n\t\t\t\tname\n\t\t\t\ttext {\n\t\t\t\t\traw\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n`;\n\nexport default function BodyText({\n\tname,\n\tsx,\n\tContainer = Box })\n{\n\tconst { allContentfulBodyText: { nodes } } = useStaticQuery(query);\n\t\t// because Gatsby static queries can't take variables, we have to get all of\n\t\t// the bodyText nodes and then find the one with the name we're looking for\n\tconst [node] = nodes.filter(({ name: nodeName }) => nodeName === name);\n\n\tif (!node) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t\t// by default, wrap the container of the rich text with BaseStyles so the\n\t\t\t// theme styles are applied to the unstyled tags, but let the caller pass\n\t\t\t// a different container to sit in between\n\t\t<BaseStyles>\n\t\t\t<Container\n\t\t\t\tsx={{\n\t\t\t\t\t\"& > p:last-of-type\": {\n\t\t\t\t\t\tm: 0\n\t\t\t\t\t},\n\t\t\t\t\t...sx\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{renderRichText(node.text)}\n\t\t\t</Container>\n\t\t</BaseStyles>\n\t);\n}\n","export default __webpack_public_path__ + \"static/logomark-ac03590e0a34453e836693399aff0fae.png\";","import React from \"react\";\nimport { BaseStyles, Box } from \"theme-ui\";\nimport { head } from \"@/components/Head\";\nimport BodyText from \"@/components/BodyText\";\nimport logo from \"@/images/logomark.png\";\n\nexport const Head = head(\"Coming Soon\");\n\nconst textColor = \"black\";\n\t// since we can't seem to easily apply a new font-size to html or body from\n\t// here, set the font-size on the container using vmin, so it's based on the\n\t// smaller side of the viewport, and then use em instead of rem to scale the\n\t// font in the rest of the elements\nconst styles = {\n\t\"&\": {\n\t\tcolor: textColor,\n\t\ttextAlign: \"center\",\n\t\tfontSize: \"3vmin\"\n\t},\n\th1: {\n\t\tfontSize: \"3em\",\n\t\tfontWeight: 500,\n\t\tlineHeight: 1.2,\n\t\tmy: \"3rem\",\n\t\tborder: \"none\",\n\t\tdisplay: \"block\"\n\t},\n\th3: {\n\t\tfontSize: \"1.75em\",\n\t\tfontWeight: 300\n\t},\n\ta: {\n\t\tcolor: textColor,\n\t\tfontSize: \"1em\",\n\t\tfontWeight: 500,\n\t\ttextDecoration: \"none\"\n\t},\n\t\"a:hover\": {\n\t\ttextDecoration: \"underline\"\n\t},\n\theader: {\n\t\theight: \"8em\",\n\t\tborderTop: \"1em solid black\",\n\t\tbackgroundImage: `url(${logo})`,\n\t\tbackgroundPosition: \"center 2em\",\n\t\tbackgroundSize: \"10em\",\n\t\tbackgroundRepeat: \"no-repeat\"\n\t},\n\tmain: {\n\t\tmx: \"auto\",\n\t\tminWidth: \"300px\",\n\t\tmaxWidth: \"1000px\",\n\t\twidth: \"80%\"\n\t}\n};\n\nfunction Styles(\n\tprops)\n{\n\t\t// we can't just add an sx prop to the BaseStyles, because the styles in sx\n\t\t// replace what's in BaseStyles instead of being merged with it\n\treturn (\n\t\t<BaseStyles>\n\t\t\t<Box\n\t\t\t\t{...props}\n\t\t\t\tsx={styles}\n\t\t\t/>\n\t\t</BaseStyles>\n\t);\n}\n\nexport default function Teaser()\n{\n\treturn (\n\t\t<Styles>\n\t\t\t<header />\n\t\t\t<BodyText name=\"teaser\" Container=\"main\" />\n\t\t</Styles>\n\t);\n}\n","import { jsx as jsx$1 } from '@theme-ui/core';\nexport { __ThemeUIContext, createElement, merge, useThemeUI } from '@theme-ui/core';\nexport { InitializeColorMode, useColorMode } from '@theme-ui/color-modes';\nexport { ThemeProvider } from '@theme-ui/theme-provider';\nexport { default as Global } from '@theme-ui/global';\nexport * from '@theme-ui/components';\nexport { css, get } from '@theme-ui/css';\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nvar BaseStyles = function BaseStyles(props) {\n  return jsx('div', _extends({}, props, {\n    sx: _extends({\n      fontFamily: 'body',\n      lineHeight: 'body',\n      fontWeight: 'body',\n      variant: 'styles'\n    }, props.sx)\n  }));\n};\nvar jsx = jsx$1;\n\nexport { BaseStyles, jsx };\n"],"names":["query","BodyText","_ref","name","sx","_ref$Container","Container","Box","node","useStaticQuery","allContentfulBodyText","nodes","filter","_ref2","_jsx","BaseStyles","children","Object","assign","m","renderRichText","text","Head","head","textColor","styles","color","textAlign","fontSize","h1","fontWeight","lineHeight","my","border","display","h3","a","textDecoration","header","height","borderTop","backgroundImage","logo","backgroundPosition","backgroundSize","backgroundRepeat","main","mx","minWidth","maxWidth","width","Styles","props","Teaser","_jsxs","_extends","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","jsx","fontFamily","variant"],"sourceRoot":""}